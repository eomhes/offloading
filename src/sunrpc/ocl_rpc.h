/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OCL_RPC_H_RPCGEN
#define _OCL_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct plat_id_t {
	int num;
	quad_t platform;
	int num_platforms;
	int result;
};
typedef struct plat_id_t plat_id_t;

struct plat_info_t {
	quad_t platform;
	int param_name;
	int param_value_size;
	struct {
		u_int param_value_len;
		char *param_value_val;
	} param_value;
	quad_t param_value_size_ret;
	int result;
};
typedef struct plat_info_t plat_info_t;

struct get_devs_t {
	quad_t platform;
	int device_type;
	int num_entries;
	quad_t devices;
	quad_t num_devices;
	int result;
};
typedef struct get_devs_t get_devs_t;

struct create_ctx_t {
	int properties;
	int num_devices;
	quad_t devices;
	quad_t callback;
	quad_t user_data;
	quad_t errorcode_ret;
	quad_t context;
};
typedef struct create_ctx_t create_ctx_t;

struct create_cqueue_t {
	quad_t context;
	quad_t device;
	int properties;
	quad_t errorcode_ret;
	quad_t queue;
};
typedef struct create_cqueue_t create_cqueue_t;

struct create_prog_ws_t {
	quad_t context;
	int count;
	char *strings;
	quad_t lengths;
	quad_t errorcode_ret;
	quad_t prog;
};
typedef struct create_prog_ws_t create_prog_ws_t;

struct build_prog_t {
	quad_t prog;
	int num_devices;
	quad_t device_list;
	quad_t options;
	quad_t callback;
	quad_t user_data;
	int result;
};
typedef struct build_prog_t build_prog_t;

struct create_kern_t {
	quad_t prog;
	char *kernel_name;
	quad_t errorcode_ret;
	quad_t kernel;
};
typedef struct create_kern_t create_kern_t;

struct create_buf_t {
	quad_t context;
	int flags;
	int size;
	struct {
		u_int host_ptr_len;
		char *host_ptr_val;
	} host_ptr;
	quad_t errorcode_ret;
	quad_t buffer;
};
typedef struct create_buf_t create_buf_t;

struct set_kern_arg_t {
	quad_t kernel;
	int arg_index;
	struct {
		u_int arg_len;
		char *arg_val;
	} arg;
	int result;
};
typedef struct set_kern_arg_t set_kern_arg_t;

struct enq_ndr_kern_t {
	quad_t command_queue;
	quad_t kernel;
	int work_dim;
	int global_work_offset;
	int global_work_size;
	int local_work_size;
	int num_events_in_wait_list;
	quad_t event_wait_list;
	quad_t event;
	int result;
};
typedef struct enq_ndr_kern_t enq_ndr_kern_t;

struct enq_read_buf_t {
	quad_t command_queue;
	quad_t buffer;
	int blocking_read;
	int offset;
	int cb;
	struct {
		u_int ptr_len;
		char *ptr_val;
	} ptr;
	quad_t num_events_in_wait_list;
	quad_t event_wait_list;
	quad_t event;
	int result;
};
typedef struct enq_read_buf_t enq_read_buf_t;

struct enq_write_buf_t {
	quad_t command_queue;
	quad_t buffer;
	int blocking_write;
	int offset;
	int cb;
	struct {
		u_int ptr_len;
		char *ptr_val;
	} ptr;
	quad_t num_events_in_wait_list;
	quad_t event_wait_list;
	quad_t event;
	int result;
};
typedef struct enq_write_buf_t enq_write_buf_t;

struct finish_t {
	quad_t command_queue;
	int result;
};
typedef struct finish_t finish_t;

struct enq_map_buf_t {
	quad_t command_queue;
	quad_t buffer;
	int blocking_map;
	int map_flags;
	int offset;
	int cb;
	int num_events_in_wait_list;
	quad_t event_wait_list;
	quad_t event;
	quad_t errorcode_ret;
	struct {
		u_int buf_len;
		char *buf_val;
	} buf;
};
typedef struct enq_map_buf_t enq_map_buf_t;

struct release_mem_t {
	quad_t buffer;
	int result;
};
typedef struct release_mem_t release_mem_t;

struct release_prog_t {
	quad_t prog;
	int result;
};
typedef struct release_prog_t release_prog_t;

struct release_kern_t {
	quad_t kernel;
	int result;
};
typedef struct release_kern_t release_kern_t;

struct release_cqueue_t {
	quad_t command_queue;
	int result;
};
typedef struct release_cqueue_t release_cqueue_t;

struct release_ctx_t {
	quad_t context;
	int result;
};
typedef struct release_ctx_t release_ctx_t;

#define OCL_PROG 0x23451111
#define OCL_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define GET_PLAT_ID 1
extern  plat_id_t * get_plat_id_1(plat_id_t *, CLIENT *);
extern  plat_id_t * get_plat_id_1_svc(plat_id_t *, struct svc_req *);
#define GET_PLAT_INFO 2
extern  plat_info_t * get_plat_info_1(plat_info_t *, CLIENT *);
extern  plat_info_t * get_plat_info_1_svc(plat_info_t *, struct svc_req *);
#define GET_DEVS_ID 3
extern  get_devs_t * get_devs_id_1(get_devs_t *, CLIENT *);
extern  get_devs_t * get_devs_id_1_svc(get_devs_t *, struct svc_req *);
#define CREATE_CTX 4
extern  create_ctx_t * create_ctx_1(create_ctx_t *, CLIENT *);
extern  create_ctx_t * create_ctx_1_svc(create_ctx_t *, struct svc_req *);
#define CREATE_CQUEUE 5
extern  create_cqueue_t * create_cqueue_1(create_cqueue_t *, CLIENT *);
extern  create_cqueue_t * create_cqueue_1_svc(create_cqueue_t *, struct svc_req *);
#define CREATE_PROG_WS 6
extern  create_prog_ws_t * create_prog_ws_1(create_prog_ws_t *, CLIENT *);
extern  create_prog_ws_t * create_prog_ws_1_svc(create_prog_ws_t *, struct svc_req *);
#define BUILD_PROG 7
extern  build_prog_t * build_prog_1(build_prog_t *, CLIENT *);
extern  build_prog_t * build_prog_1_svc(build_prog_t *, struct svc_req *);
#define CREATE_KERN 8
extern  create_kern_t * create_kern_1(create_kern_t *, CLIENT *);
extern  create_kern_t * create_kern_1_svc(create_kern_t *, struct svc_req *);
#define CREATE_BUF 9
extern  create_buf_t * create_buf_1(create_buf_t *, CLIENT *);
extern  create_buf_t * create_buf_1_svc(create_buf_t *, struct svc_req *);
#define SET_KERN_ARG 10
extern  set_kern_arg_t * set_kern_arg_1(set_kern_arg_t *, CLIENT *);
extern  set_kern_arg_t * set_kern_arg_1_svc(set_kern_arg_t *, struct svc_req *);
#define ENQ_NDR_KERN 11
extern  enq_ndr_kern_t * enq_ndr_kern_1(enq_ndr_kern_t *, CLIENT *);
extern  enq_ndr_kern_t * enq_ndr_kern_1_svc(enq_ndr_kern_t *, struct svc_req *);
#define FINISH 12
extern  finish_t * finish_1(finish_t *, CLIENT *);
extern  finish_t * finish_1_svc(finish_t *, struct svc_req *);
#define ENQ_MAP_BUF 13
extern  enq_map_buf_t * enq_map_buf_1(enq_map_buf_t *, CLIENT *);
extern  enq_map_buf_t * enq_map_buf_1_svc(enq_map_buf_t *, struct svc_req *);
#define ENQ_READ_BUF 14
extern  enq_read_buf_t * enq_read_buf_1(enq_read_buf_t *, CLIENT *);
extern  enq_read_buf_t * enq_read_buf_1_svc(enq_read_buf_t *, struct svc_req *);
#define ENQ_WRITE_BUF 15
extern  enq_write_buf_t * enq_write_buf_1(enq_write_buf_t *, CLIENT *);
extern  enq_write_buf_t * enq_write_buf_1_svc(enq_write_buf_t *, struct svc_req *);
#define RELEASE_MEM 16
extern  release_mem_t * release_mem_1(release_mem_t *, CLIENT *);
extern  release_mem_t * release_mem_1_svc(release_mem_t *, struct svc_req *);
#define RELEASE_PROG 17
extern  release_prog_t * release_prog_1(release_prog_t *, CLIENT *);
extern  release_prog_t * release_prog_1_svc(release_prog_t *, struct svc_req *);
#define RELEASE_KERN 18
extern  release_kern_t * release_kern_1(release_kern_t *, CLIENT *);
extern  release_kern_t * release_kern_1_svc(release_kern_t *, struct svc_req *);
#define RELEASE_CQUEUE 19
extern  release_cqueue_t * release_cqueue_1(release_cqueue_t *, CLIENT *);
extern  release_cqueue_t * release_cqueue_1_svc(release_cqueue_t *, struct svc_req *);
#define RELEASE_CTX 20
extern  release_ctx_t * release_ctx_1(release_ctx_t *, CLIENT *);
extern  release_ctx_t * release_ctx_1_svc(release_ctx_t *, struct svc_req *);
extern int ocl_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define GET_PLAT_ID 1
extern  plat_id_t * get_plat_id_1();
extern  plat_id_t * get_plat_id_1_svc();
#define GET_PLAT_INFO 2
extern  plat_info_t * get_plat_info_1();
extern  plat_info_t * get_plat_info_1_svc();
#define GET_DEVS_ID 3
extern  get_devs_t * get_devs_id_1();
extern  get_devs_t * get_devs_id_1_svc();
#define CREATE_CTX 4
extern  create_ctx_t * create_ctx_1();
extern  create_ctx_t * create_ctx_1_svc();
#define CREATE_CQUEUE 5
extern  create_cqueue_t * create_cqueue_1();
extern  create_cqueue_t * create_cqueue_1_svc();
#define CREATE_PROG_WS 6
extern  create_prog_ws_t * create_prog_ws_1();
extern  create_prog_ws_t * create_prog_ws_1_svc();
#define BUILD_PROG 7
extern  build_prog_t * build_prog_1();
extern  build_prog_t * build_prog_1_svc();
#define CREATE_KERN 8
extern  create_kern_t * create_kern_1();
extern  create_kern_t * create_kern_1_svc();
#define CREATE_BUF 9
extern  create_buf_t * create_buf_1();
extern  create_buf_t * create_buf_1_svc();
#define SET_KERN_ARG 10
extern  set_kern_arg_t * set_kern_arg_1();
extern  set_kern_arg_t * set_kern_arg_1_svc();
#define ENQ_NDR_KERN 11
extern  enq_ndr_kern_t * enq_ndr_kern_1();
extern  enq_ndr_kern_t * enq_ndr_kern_1_svc();
#define FINISH 12
extern  finish_t * finish_1();
extern  finish_t * finish_1_svc();
#define ENQ_MAP_BUF 13
extern  enq_map_buf_t * enq_map_buf_1();
extern  enq_map_buf_t * enq_map_buf_1_svc();
#define ENQ_READ_BUF 14
extern  enq_read_buf_t * enq_read_buf_1();
extern  enq_read_buf_t * enq_read_buf_1_svc();
#define ENQ_WRITE_BUF 15
extern  enq_write_buf_t * enq_write_buf_1();
extern  enq_write_buf_t * enq_write_buf_1_svc();
#define RELEASE_MEM 16
extern  release_mem_t * release_mem_1();
extern  release_mem_t * release_mem_1_svc();
#define RELEASE_PROG 17
extern  release_prog_t * release_prog_1();
extern  release_prog_t * release_prog_1_svc();
#define RELEASE_KERN 18
extern  release_kern_t * release_kern_1();
extern  release_kern_t * release_kern_1_svc();
#define RELEASE_CQUEUE 19
extern  release_cqueue_t * release_cqueue_1();
extern  release_cqueue_t * release_cqueue_1_svc();
#define RELEASE_CTX 20
extern  release_ctx_t * release_ctx_1();
extern  release_ctx_t * release_ctx_1_svc();
extern int ocl_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_plat_id_t (XDR *, plat_id_t*);
extern  bool_t xdr_plat_info_t (XDR *, plat_info_t*);
extern  bool_t xdr_get_devs_t (XDR *, get_devs_t*);
extern  bool_t xdr_create_ctx_t (XDR *, create_ctx_t*);
extern  bool_t xdr_create_cqueue_t (XDR *, create_cqueue_t*);
extern  bool_t xdr_create_prog_ws_t (XDR *, create_prog_ws_t*);
extern  bool_t xdr_build_prog_t (XDR *, build_prog_t*);
extern  bool_t xdr_create_kern_t (XDR *, create_kern_t*);
extern  bool_t xdr_create_buf_t (XDR *, create_buf_t*);
extern  bool_t xdr_set_kern_arg_t (XDR *, set_kern_arg_t*);
extern  bool_t xdr_enq_ndr_kern_t (XDR *, enq_ndr_kern_t*);
extern  bool_t xdr_enq_read_buf_t (XDR *, enq_read_buf_t*);
extern  bool_t xdr_enq_write_buf_t (XDR *, enq_write_buf_t*);
extern  bool_t xdr_finish_t (XDR *, finish_t*);
extern  bool_t xdr_enq_map_buf_t (XDR *, enq_map_buf_t*);
extern  bool_t xdr_release_mem_t (XDR *, release_mem_t*);
extern  bool_t xdr_release_prog_t (XDR *, release_prog_t*);
extern  bool_t xdr_release_kern_t (XDR *, release_kern_t*);
extern  bool_t xdr_release_cqueue_t (XDR *, release_cqueue_t*);
extern  bool_t xdr_release_ctx_t (XDR *, release_ctx_t*);

#else /* K&R C */
extern bool_t xdr_plat_id_t ();
extern bool_t xdr_plat_info_t ();
extern bool_t xdr_get_devs_t ();
extern bool_t xdr_create_ctx_t ();
extern bool_t xdr_create_cqueue_t ();
extern bool_t xdr_create_prog_ws_t ();
extern bool_t xdr_build_prog_t ();
extern bool_t xdr_create_kern_t ();
extern bool_t xdr_create_buf_t ();
extern bool_t xdr_set_kern_arg_t ();
extern bool_t xdr_enq_ndr_kern_t ();
extern bool_t xdr_enq_read_buf_t ();
extern bool_t xdr_enq_write_buf_t ();
extern bool_t xdr_finish_t ();
extern bool_t xdr_enq_map_buf_t ();
extern bool_t xdr_release_mem_t ();
extern bool_t xdr_release_prog_t ();
extern bool_t xdr_release_kern_t ();
extern bool_t xdr_release_cqueue_t ();
extern bool_t xdr_release_ctx_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OCL_RPC_H_RPCGEN */
